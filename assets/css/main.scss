* {
  font-family: 'Inconsolata', monospace;
}

p {
  margin-bottom: 0 !important;
}

.width-full {
  width: 100%;
}

.height-full {
  height: 100%;
}

//margins
.m-right-10 {
  margin-right: 10px;
}

.m-bottom-10 {
  margin-bottom: 10px;
}

.m-top-40 {
  margin-top: 20px;
}

//flex
.justify-center-xy {
  display: flex;
  align-items: center;
  justify-content: center;
}

.justify-center-x {
  display: flex;
  align-items: center;
}

.align-right {
  display: flex;
  justify-content: flex-end;
}

//fonts
.f-white {
  color: #fff;
}

.f-black {
  color: #020403 !important;
}

.f-medium {
  font-size: 1.8em;
}

.f-small {
  font-size: 1.2em;
}

.f-500 {
  font-weight: 500;
}

.pointer {
  cursor: pointer;
}

.decore-none {
  text-decoration: none !important;
}

//media queries
@media only screen and (max-width: 969px) {
  .profile-info {
    .profile-info__details {
      margin-right: 160px !important;
    }
    .profile-info__photo {
      // margin-left: 150px !important;
      .v-image {
        height: 300px !important;
        width: 150px !important;
      }
    }
    .profile-info__photo:after {
      height: 335px !important;
      width: 150px !important;
      top: -17px !important;
    }
  }

  .left-back-image {
    height: 500px !important;
  }

  .left-sider {
    .left-sider__holder {
      position: relative !important;
      height: 500px;
      .profile {
        position: inherit;
      }
    }
  }

  .back-container {
    position: relative !important;
  }

  .informations {
    .info-left {
      margin-right: 20px !important;
    }
    .info-right {
      margin-left: 20px !important;
    }
  }
}

//glitch effect
@mixin glitchCopy {
  content: attr(data-text);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.glitch-parent:hover .glitch {
position: relative;
color: #020403;
font-size: 1.5em;
letter-spacing: .5em;
/* Animation provies a slight random skew. Check bottom of doc
for more information on how to random skew. */
animation: glitch-skew 1s infinite linear alternate-reverse;

// Creates a copy before our text.
&::before{
  // Duplicates our text with the mixin.
  @include glitchCopy;
  // Scoots text slightly to the left for the color offset.
  left: 2px;
  // Creates the color 'shadow' that happens on the glitch.
  text-shadow: -2px 0 #ff00c1;
  /* Creates an initial clip for our glitch. This works in
  a typical top,right,bottom,left fashion and creates a mask
  to only show a certain part of the glitch at a time. */
  clip: rect(44px, 450px, 56px, 0);
  /* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
  with an alternating animation to keep things fresh. */
  animation: glitch-anim 5s infinite linear alternate-reverse;
}

// Creates a copy after our text. Note comments from ::before.
&::after {
  @include glitchCopy;
  left: -2px;
  text-shadow: -2px 0 #00fff9, 2px 2px #ff00c1;
  animation: glitch-anim2 1s infinite linear alternate-reverse;
}
}

/* Creates an animation with 20 steaps. For each step, it calculates
a percentage for the specific step. It then generates a random clip
box to be used for the random glitch effect. Also adds a very subtle
skew to change the 'thickness' of the glitch.*/
@keyframes glitch-anim {
$steps: 20;
@for $i from 0 through $steps {
  #{percentage($i*(1/$steps))} {
    clip: rect(random(100)+px, 9999px, random(100)+px, 0);
    transform: skew((random(100) / 100) + deg);
  }
}
}

// Same deal, just duplicated for ultra randomness.
@keyframes glitch-anim2 {
$steps: 20;
@for $i from 0 through $steps {
  #{percentage($i*(1/$steps))} {
    clip: rect(random(100)+px, 9999px, random(100)+px, 0);
    transform: skew((random(100) / 100) + deg);
  }
}
}

// Does the same deal as before, but now only skews. Used for main text.
@keyframes glitch-skew {
$steps: 10;
@for $i from 0 through $steps {
  #{percentage($i*(1/$steps))} {
    transform: skew((random(10) - 5) + deg);
  }
}
}
